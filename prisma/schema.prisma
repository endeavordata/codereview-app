generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Externally sourced datasets

model Repository {
  name_with_owner          String              @id
  observed_at              DateTime
  created_at               DateTime
  pushed_at                DateTime?
  description              String?
  stargazer_count          Int
  fork_count               Int
  homepage_url             String?
  is_archived              Boolean
  is_fork                  Boolean
  is_mirror                Boolean
  mirror_url               String?
  primary_language         String?
  topic_names              String[]
  language_names           String[]
  language_sizes           BigInt[]
  repository_collections   CollectionRepository[]

  @@map("repository")
}

model Topic {
  name                 String                     @id
  repository_segments  SegmentTopic[]

  @@map("topic")
}

model ProgrammingLanguage {
  name                   String                   @id
  repository_segments    SegmentPrimaryLanguage[]

  @@map("programming_language")
}

// Models that use a hightouch_id as the primary key only do so because Hightouch
// doesn't support multi-column keys. These can be removed if Hightouch is no longer 
// used.

model Report {
  entity_type           String
  entity_id             String
  created_at            DateTime                 @default(now())
  updated_at            DateTime?                @updatedAt
  content               Json?
  hightouch_id          String                   @id

  @@map("report")
}

model RepositorySegment {
  slug                  String                   @id
  display_name          String
  description           String?
  topics                SegmentTopic[]
  topics_required       Int?
  topics_in_description Boolean                  @default(false)
  primary_languages     SegmentPrimaryLanguage[]

  @@map("repository_segment")
}

model RepositoryCollection {
  slug                  String                   @id
  display_name          String
  description           String?
  repositories          CollectionRepository[]

  @@map("repository_collection")
}

model SegmentTopic {
  created_at    DateTime          @default(now())
  segment       RepositorySegment @relation(fields: [segment_id], references: [slug])
  segment_id    String
  topic         Topic             @relation(fields: [topic_id], references: [name])
  topic_id      String
  hightouch_id  String            @id

  @@map("segment_topic")
}

model SegmentPrimaryLanguage {
  created_at          DateTime            @default(now())
  segment             RepositorySegment   @relation(fields: [segment_id], references: [slug])
  segment_id          String
  primary_language    ProgrammingLanguage @relation(fields: [primary_language_id], references: [name])
  primary_language_id String

  @@id([segment_id, primary_language_id])
  @@map("segment_primary_language")
}

model CollectionRepository {
  created_at     DateTime                 @default(now())
  collection     RepositoryCollection     @relation(fields: [collection_id], references: [slug])
  collection_id  String
  repository     Repository               @relation(fields: [repository_id], references: [name_with_owner])
  repository_id  String
  hightouch_id   String                   @id
  
  @@map("collection_repository")
}
