generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Externally sourced datasets

model Repository {
  name_with_owner   String              @id
  observed_at       DateTime
  created_at        DateTime
  pushed_at         DateTime?
  description       String?
  stargazer_count   Int
  fork_count        Int
  homepage_url      String?
  is_archived       Boolean
  is_fork           Boolean
  is_mirror         Boolean
  mirror_url        String?
  primary_language  String?
  topic_names       String[]
  language_names    String[]
  language_sizes    Int[]
  SegmentRepository SegmentRepository[]
}

model Topic {
  name         String         @id
  SegmentTopic SegmentTopic[]
}

model ProgrammingLanguage {
  name                   String                   @id
  SegmentPrimaryLanguage SegmentPrimaryLanguage[]
}

// Reporting data model

model Report {
  id                    String             @id @default(uuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  refreshed_at          DateTime
  type                  String
  title                 String
  description           String?
  repository_segment    RepositorySegment? @relation(fields: [repository_segment_id], references: [id])
  repository_segment_id String?
  data                  Json?
}

model RepositorySegment {
  id                    String                   @id @default(uuid())
  created_at            DateTime                 @default(now())
  updated_at            DateTime                 @updatedAt
  name                  String
  topics                SegmentTopic[]
  topics_required       Int?
  topics_in_description Boolean                  @default(false)
  primary_languages     SegmentPrimaryLanguage[]
  repositories          SegmentRepository[]
  Report                Report[]
}

model SegmentTopic {
  created_at DateTime          @default(now())
  segment    RepositorySegment @relation(fields: [segment_id], references: [id])
  segment_id String
  topic      Topic             @relation(fields: [topic_id], references: [name])
  topic_id   String

  @@id([segment_id, topic_id])
}

model SegmentPrimaryLanguage {
  created_at          DateTime            @default(now())
  segment             RepositorySegment   @relation(fields: [segment_id], references: [id])
  segment_id          String
  primary_language    ProgrammingLanguage @relation(fields: [primary_language_id], references: [name])
  primary_language_id String

  @@id([segment_id, primary_language_id])
}

model SegmentRepository {
  created_at    DateTime          @default(now())
  segment       RepositorySegment @relation(fields: [segment_id], references: [id])
  segment_id    String
  repository    Repository        @relation(fields: [repository_id], references: [name_with_owner])
  repository_id String

  @@id([segment_id, repository_id])
}
